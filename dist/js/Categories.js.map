{"version":3,"sources":["../../js/Categories.js"],"names":["Categories","firebaseApp","categoriesStore","database","ref","catKey","parentKey","callback","getCategoriesRef","orderByChild","equalTo","once","snapshot","items","val","data","Object","keys","map","key","obj","_key","getCategoryRef","then","item","cardsStore","base","parts","Array","prototype","slice","call","arguments","forEach","p","k","hasOwnProperty","progressRef","getProgressRef","cardsRef","child","cardsSnapshot","progressSnapshot","joint","extend","getCategoryProgress","progress","veryhard","hard","normal","learned","property","push","progresses"],"mappings":"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","file":"Categories.js","sourcesContent":["/**\n * Created by michaelziorjen on 08/12/16.\n */\n\nclass Categories {\n    constructor(firebaseApp) {\n        this.firebaseApp = firebaseApp;\n        this.categoriesStore = [];\n    }\n\n    /**\n     * Returns the firebase reference to all the categories\n     * @returns {*} reference to the firebase object\n     */\n    getCategoriesRef() {\n        return this.firebaseApp.database().ref('categories');\n    }\n\n    /**\n     * Returns the firebase reference to a single category\n     * @param catKey : String key of the category\n     * @returns {*} reference to the firebase object\n     */\n    getCategoryRef(catKey) {\n        return this.firebaseApp.database().ref('categories/' + catKey);\n    }\n\n    /**\n     * Returns the firebase reference to the progress\n     * @returns {*} reference to the firebase object\n     */\n    getProgressRef() {\n        return this.firebaseApp.database().ref('progress');\n    }\n\n    /**\n     * Gets all the categories that are children of the specified key's category\n     * @param parentKey : String key of the parent category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoriesByParent(parentKey = \"\", callback) {\n        let ref = this.getCategoriesRef().orderByChild(\"parent\").equalTo(parentKey);\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n    /**\n     * Gets a single category specified by it's key\n     * @param catKey : String key of the category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoryByKey(catKey,callback) {\n        this.getCategoryRef(catKey).once('value').then(function(snapshot) {\n            let item;\n            if(snapshot.val()) {\n                let key = snapshot.val().key;\n                this.cardsStore[key] = snapshot.val();\n                item = snapshot.val();\n\n            }\n            callback(item);\n        });\n    }\n    /**\n     * Gets all the categories\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getAllCategories(callback) {\n        let ref = this.getCategoriesRef();\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                this.categoriesStore = data;\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n\n    /**\n     * Helper function that merges two firebase objects with the same key together\n     * @param base : object into which the data should be merged\n     * @returns {*} merged object\n     */\n    extend(base) {\n        const parts = Array.prototype.slice.call(arguments, 1);\n        parts.forEach(function (p) {\n            if (p && typeof (p) === 'object') {\n                for (let k in p) {\n                    if (p.hasOwnProperty(k)) {\n                        base[k] = p[k];\n                    }\n                }\n            }\n        });\n        return base;\n    }\n\n    /**\n     * Returns the progress for each card in the specified category\n     * @param catKey : String key for the category\n     * @param callback : Function that gets called when promises are resolved\n     */\n    getCategoryProgress(catKey, callback) {\n        let progressRef = this.getProgressRef();\n        let cardsRef = this.getCategoryRef(catKey).child('cards');\n        cardsRef.once(\"value\", (cardsSnapshot) => {\n            progressRef.once(\"value\",(progressSnapshot) => {\n                let joint = this.extend({},cardsSnapshot.val(),progressSnapshot.val());\n                callback(joint);\n            });\n        });\n    }\n\n    getCategoryProgressGroups(catKey, callback) {\n        this.getCategoryProgress(catKey,(progress)=> {\n            let veryhard = [];\n            let hard = [];\n            let normal = [];\n            let learned = [];\n            for (let property in progress) {\n                if (progress.hasOwnProperty(property)) {\n                    if(property.progress < -2) {\n                        veryhard.push(property);\n                    } else if(property.progress == -1 ) {\n                        hard.push(property);\n                    } else if (property.progress >= 2) {\n                        learned.push(property);\n                    } else  {\n                        normal.push(property);\n                    }\n                }\n                let progresses = { 'veryhard': veryhard, 'hard': hard,'normal': normal, 'learned': learned};\n                callback(progresses);\n            }\n        })\n    }\n\n}"]}