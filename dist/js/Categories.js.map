{"version":3,"sources":["../../js/Categories.js"],"names":["Categories","firebaseApp","categoriesStore","database","ref","catKey","parentKey","callback","getCategoriesRef","orderByChild","equalTo","once","snapshot","items","val","data","Object","keys","map","key","obj","_key","getCategoryRef","then","item","cardsStore"],"mappings":";;;;;;AAAA;;;;IAIMA,U;AACF,wBAAYC,WAAZ,EAAyB;AAAA;;AACrB,aAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuB,EAAvB;AACH;;AAED;;;;;;;;2CAImB;AACf,mBAAO,KAAKD,WAAL,CAAiBE,QAAjB,GAA4BC,GAA5B,CAAgC,YAAhC,CAAP;AACH;;AAED;;;;;;;;uCAKeC,M,EAAQ;AACnB,mBAAO,KAAKJ,WAAL,CAAiBE,QAAjB,GAA4BC,GAA5B,CAAgC,gBAAgBC,MAAhD,CAAP;AACH;;AAED;;;;;;;;gDAKgD;AAAA,gBAA1BC,SAA0B,uEAAd,EAAc;AAAA,gBAAVC,QAAU;;AAC5C,gBAAIH,MAAM,KAAKI,gBAAL,GAAwBC,YAAxB,CAAqC,QAArC,EAA+CC,OAA/C,CAAuDJ,SAAvD,CAAV;AACAF,gBAAIO,IAAJ,CAAS,OAAT,EAAiB,UAASC,QAAT,EAAmB;AAChC,oBAAIC,QAAQ,EAAZ;AACA,oBAAGD,SAASE,GAAT,EAAH,EAAmB;AAAA;AACf,4BAAIC,OAAOH,SAASE,GAAT,EAAX;AACAD,gCAAQG,OAAOC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAsB,UAACC,GAAD,EAAS;AACnC,gCAAIC,MAAML,KAAKI,GAAL,CAAV;AACAC,gCAAIC,IAAJ,GAAWF,GAAX;AACA,mCAAOC,GAAP;AACH,yBAJO,CAAR;AAFe;AAOlB;AACDb,yBAASM,KAAT;AACH,aAXD;AAYH;AACD;;;;;;;;yCAKiBR,M,EAAOE,Q,EAAU;AAC9B,iBAAKe,cAAL,CAAoBjB,MAApB,EAA4BM,IAA5B,CAAiC,OAAjC,EAA0CY,IAA1C,CAA+C,UAASX,QAAT,EAAmB;AAC9D,oBAAIY,aAAJ;AACA,oBAAGZ,SAASE,GAAT,EAAH,EAAmB;AACf,wBAAIK,MAAMP,SAASE,GAAT,GAAeK,GAAzB;AACA,yBAAKM,UAAL,CAAgBN,GAAhB,IAAuBP,SAASE,GAAT,EAAvB;AACAU,2BAAOZ,SAASE,GAAT,EAAP;AAEH;AACDP,yBAASiB,IAAT;AACH,aATD;AAUH;AACD;;;;;;;yCAIiBjB,Q,EAAU;AACvB,gBAAIH,MAAM,KAAKI,gBAAL,EAAV;AACAJ,gBAAIO,IAAJ,CAAS,OAAT,EAAiB,UAASC,QAAT,EAAmB;AAAA;;AAChC,oBAAIC,QAAQ,EAAZ;AACA,oBAAGD,SAASE,GAAT,EAAH,EAAmB;AAAA;AACf,4BAAIC,OAAOH,SAASE,GAAT,EAAX;AACA,8BAAKZ,eAAL,GAAuBa,IAAvB;AACAF,gCAAQG,OAAOC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAsB,UAACC,GAAD,EAAS;AACnC,gCAAIC,MAAML,KAAKI,GAAL,CAAV;AACAC,gCAAIC,IAAJ,GAAWF,GAAX;AACA,mCAAOC,GAAP;AACH,yBAJO,CAAR;AAHe;AAQlB;AACDb,yBAASM,KAAT;AACH,aAZD;AAaH","file":"Categories.js","sourcesContent":["/**\n * Created by michaelziorjen on 08/12/16.\n */\n\nclass Categories {\n    constructor(firebaseApp) {\n        this.firebaseApp = firebaseApp;\n        this.categoriesStore = [];\n    }\n\n    /**\n     * Returns the firebase reference to all the categories\n     * @returns {*} reference to the firebase object\n     */\n    getCategoriesRef() {\n        return this.firebaseApp.database().ref('categories');\n    }\n\n    /**\n     * Returns the firebase reference to a single category\n     * @param catKey : String key of the category\n     * @returns {*} reference to the firebase object\n     */\n    getCategoryRef(catKey) {\n        return this.firebaseApp.database().ref('categories/' + catKey);\n    }\n\n    /**\n     * Gets all the categories that are children of the specified key's category\n     * @param parentKey : String key of the parent category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoriesByParent(parentKey = \"\", callback) {\n        let ref = this.getCategoriesRef().orderByChild(\"parent\").equalTo(parentKey);\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n    /**\n     * Gets a single category specified by it's key\n     * @param catKey : String key of the category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoryByKey(catKey,callback) {\n        this.getCategoryRef(catKey).once('value').then(function(snapshot) {\n            let item;\n            if(snapshot.val()) {\n                let key = snapshot.val().key;\n                this.cardsStore[key] = snapshot.val();\n                item = snapshot.val();\n\n            }\n            callback(item);\n        });\n    }\n    /**\n     * Gets all the categories\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getAllCategories(callback) {\n        let ref = this.getCategoriesRef();\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                this.categoriesStore = data;\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n}"]}