{"version":3,"sources":["../../js/Categories.js"],"names":["Categories","firebaseApp","categoriesStore","database","ref","catKey","parentKey","getCategoriesRef","orderByChild","equalTo","callback","once","snapshot","items","val","data","Object","keys","map","key","obj","_key","getCategoryRef","then","item","cardsStore","base","parts","Array","prototype","slice","call","arguments","forEach","p","k","hasOwnProperty","first","second","assign","progressRef","getProgressRef","cardsRef","child","cardsSnapshot","progressSnapshot","progress","cards","joint","leftJoin","progressSnap","veryhard","hard","normal","learned","unviewed"],"mappings":"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","file":"Categories.js","sourcesContent":["/**\n * Created by michaelziorjen on 08/12/16.\n */\n\nclass Categories {\n    constructor(firebaseApp) {\n        this.firebaseApp = firebaseApp;\n        this.categoriesStore = [];\n    }\n\n    /**\n     * Returns the firebase reference to all the categories\n     * @returns {*} reference to the firebase object\n     */\n    getCategoriesRef() {\n        return this.firebaseApp.database().ref('categories');\n    }\n\n    /**\n     * Returns the firebase reference to a single category\n     * @param catKey : String key of the category\n     * @returns {*} reference to the firebase object\n     */\n    getCategoryRef(catKey) {\n        return this.firebaseApp.database().ref('categories/' + catKey);\n    }\n\n    /**\n     * Returns the firebase reference to the progress\n     * @returns {*} reference to the firebase object\n     */\n    getProgressRef() {\n        return this.firebaseApp.database().ref('progress');\n    }\n\n    getCategoryRefByParent(parentKey) {\n        return this.getCategoriesRef().orderByChild(\"parent\").equalTo(parentKey);\n    }\n\n    /**\n     * Gets all the categories that are children of the specified key's category\n     * @param parentKey : String key of the parent category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoriesByParent(parentKey = \"\", callback) {\n        let ref = this.getCategoriesRef().orderByChild(\"parent\").equalTo(parentKey);\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n    /**\n     * Gets a single category specified by it's key\n     * @param catKey : String key of the category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCategoryByKey(catKey,callback) {\n        this.getCategoryRef(catKey).once('value').then(function(snapshot) {\n            let item;\n            if(snapshot.val()) {\n                let key = snapshot.val().key;\n                this.cardsStore[key] = snapshot.val();\n                item = snapshot.val();\n\n            }\n            callback(item);\n        });\n    }\n    /**\n     * Gets all the categories\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getAllCategories(callback) {\n        let ref = this.getCategoriesRef();\n        ref.once('value',function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                this.categoriesStore = data;\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n\n    /**\n     * Helper function that merges X firebase objects together\n     * all the attributes are merged.\n     * @param base : object into which the data should be merged\n     * @returns {*} merged object\n     */\n    extend(base) {\n        const parts = Array.prototype.slice.call(arguments, 1);\n        parts.forEach(function (p) {\n            if (p && typeof (p) === 'object') {\n                for (let k in p) {\n                    if (p.hasOwnProperty(k)) {\n                        base[k] = p[k];\n                    }\n                }\n            }\n        });\n        return base;\n    }\n\n    /**\n     * Helper function that merges two firebase objects the attributes are only merged if both objects contain the same keys\n     * @param first : object into which the data should be merged\n     * @param second : object from which the data should be taken\n     * @returns {*} merged object\n     */\n    leftJoin(first,second) {\n        for (let key in first) {\n            if (first.hasOwnProperty(key)) {\n                if(second[key]) {\n                    Object.assign(first[key],second[key]);\n                }\n            }\n        }\n        return first;\n    }\n\n    /**\n     * Returns the progress for each card in the specified category\n     * @param catKey : String key for the category\n     * @param callback : Function that gets called when promises are resolved\n     */\n    getCategoryProgress(catKey, callback) {\n        let progressRef = this.getProgressRef();\n        let cardsRef = this.getCategoryRef(catKey).child('cards');\n        cardsRef.once(\"value\", (cardsSnapshot) => {\n            if(cardsSnapshot.val()) {\n                progressRef.once(\"value\",(progressSnapshot) => {\n                    let progress = progressSnapshot.val();\n                    let cards = cardsSnapshot.val();\n                    let joint = this.leftJoin(cards,progress);\n                    callback(joint);\n                });\n            } else {\n                callback(null);\n            }\n        });\n    }\n\n    /**\n     * Returns the progress for all cards\n     * @param callback : Function that gets called when the promise is resolved\n     */\n    getProgress(callback) {\n        let progressRef = this.getProgressRef();\n        progressRef.once(\"value\", (progressSnap) => {\n            if(progressSnap.val()) {\n                callback(progressSnap.val());\n            } else {\n                callback(null);\n            }\n        });\n    }\n\n    /**\n     * Formats a joined progress object into the following groups:\n     * - veryhard: 2 or more times wrong in a row\n     * - hard: 1 time wrong in a row\n     * - normal: zero or 1 time right in a row\n     * - learned: two times right in a row\n     * @param progress : Object with the cards as keys\n     * @return progresses : Object with the specified attributes above\n     */\n    getCategoryProgressGroups(progress) {\n        if(progress) {\n            let veryhard = {};\n            let hard = {};\n            let normal = {};\n            let learned = {};\n            let unviewed = {};\n            Object.keys(progress).forEach(function(key) {\n                let val = progress[key];\n                if (progress.hasOwnProperty(key)) {\n                    if (val.progress <= -2) {\n                        veryhard[key] = val;\n                    } else if (val.progress == -1) {\n                        hard[key] = val\n                    } else if (val.progress >= 2) {\n                        learned[key] = val\n                    } else if (val.progress == 1) {\n                        normal[key] = val\n                    } else { // Progress is not set or zero\n                        unviewed[key] = val\n                    }\n                }\n            });\n            return {'veryhard': veryhard, 'hard': hard, 'normal': normal, 'learned': learned, 'unviewed': unviewed};\n        } else {\n            return null;\n        }\n    }\n\n}"]}