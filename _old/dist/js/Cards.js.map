{"version":3,"sources":["../../js/Cards.js"],"names":["Cards","firebaseApp","cardsStore","database","ref","cardKey","catKey","callback","getCardsRef","orderByChild","equalTo","once","then","snapshot","items","val","data","Object","keys","map","key","obj","_key","getCardRef","item","progressRef","getCardProgressRef","child","transaction","current_value","updates","update"],"mappings":"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","file":"Cards.js","sourcesContent":["/**\n * Created by michaelziorjen on 08/12/16.\n */\nclass Cards {\n    constructor(firebaseApp) {\n        this.firebaseApp = firebaseApp;\n        this.cardsStore = [];\n    }\n    /**\n     * Returns the firebase reference to all the cards\n     * @returns {*} reference to the firebase object\n     */\n    getCardsRef() {\n        return this.firebaseApp.database().ref('cards');\n    }\n    /**\n     * Returns the firebase reference to a single card\n     * @param cardKey : String key of the card\n     * @returns {*} reference to the firebase object\n     */\n    getCardRef(cardKey) {\n        return this.firebaseApp.database().ref('cards/' + cardKey);\n    }\n\n    /**\n     * Returns the firebase reference to the progress of a card\n     * @param cardKey : String key of the card\n     * @returns {*} reference to the firebase object\n     */\n    getCardProgressRef(cardKey) {\n        return this.firebaseApp.database().ref('progress/' + cardKey);\n    }\n\n    /**\n     * Gets all the cards that are in the specified key's category\n     * @param catKey : String key of the category\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCardsByCategory(catKey,callback) {\n        this.getCardsRef().orderByChild('category').equalTo(catKey).once('value').then(function(snapshot) {\n            let items = [];\n            if(snapshot.val()) {\n                let data = snapshot.val();\n                this.cardsStore = data;\n                items = Object.keys(data).map((key) => {\n                    let obj = data[key];\n                    obj._key = key;\n                    return obj;\n                });\n            }\n            callback(items);\n        });\n    }\n    /**\n     * Gets a single card specified by it's key\n     * @param cardKey : String key of the card\n     * @param callback : Function gets called when the promise is resolved\n     */\n    getCardByKey(cardKey, callback) {\n        this.getCardRef(cardKey).once('value').then(function(snapshot) {\n            let item;\n            if(snapshot.val()) {\n                let key = snapshot.val().key;\n                this.cardsStore[key] = snapshot.val()\n                item = snapshot.val();\n            }\n            callback(item);\n        });\n    }\n\n    /**\n     * Gets the progress of a card specified by it's key, gets 0 if no progress is set\n     * @param cardKey : String key of the card\n     * @param callback : Function that get called when promise is resolved\n     */\n    getCardProgress(cardKey,callback) {\n        let progressRef = this.getCardProgressRef(cardKey).child('progress');\n        progressRef.once('value', function(snapshot) {\n           let item = 0;\n           if(snapshot.val()) {\n               item = snapshot.val();\n           }\n           callback(item);\n        });\n    }\n\n    /**\n     * Increases the progress of a card\n     * @param cardKey : String key of the card\n     */\n    increaseCardProgress(cardKey) { // TESTED\n        let progressRef = this.getCardProgressRef(cardKey).child('progress');\n        progressRef.transaction(function (current_value) {\n            if(!current_value) {\n                return 1;\n            }\n            if(current_value <= 0) {\n                return 1;\n            } else {\n                return current_value + 1;\n            }\n        });\n    }\n    /**\n     * Decreases the progress of a card\n     * @param cardKey : String key of the card\n     */\n    decreaseCardProgress(cardKey) { // TESTED\n        let progressRef = this.getCardProgressRef(cardKey).child('progress');\n        progressRef.transaction(function (current_value) {\n            if(!current_value) {\n                return -1;\n            }\n            if(current_value >= 0) {\n                return -1;\n            } else {\n                return current_value - 1;\n            }\n        });\n    }\n\n    /**\n     * Resets the progress of a card to zero\n     * @param cardKey : String key of the card\n     */\n    resetCardProgress(cardKey) { // TESTED\n        let updates = {};\n        updates['progress'] = 0;\n        this.getCardProgressRef(cardKey).update(updates);\n    }\n\n}"]}